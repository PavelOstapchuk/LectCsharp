// string[,] table = new string[2,5]; // строковые значение, вывод в столбик
// // table[0,0] table[0,1] table[0,2] table[0,3] table[0,4]
// // table[1,0] table[1,1] table[1,2] table[1,3] table[1,4]
// table[1,2]="элемент";
// for (int row = 0; row<2; row++)
// {
//     for (int column = 0; column <5; column++)
//     {
//         Console.WriteLine($"-{table[row, column]}-");
//     }
// }

// int [,] matrix = new int [3,4]; // числовые значения, вывод в столбик
// for (int row = 0; row<3; row++)
// {
//     for (int column = 0; column <4; column++)
//     {
//         Console.WriteLine($"{matrix[row, column]}");
//     }
// }

// int [,] matrix = new int [3,4]; // числовые значения, вывод двухмерной таблицей
// for (int row = 0; row<matrix.GetLength(0); row++)// matrix.GetLength(0) - выдает количество строк массива (0)
// {
//     for (int column = 0; column <matrix.GetLength(1); column++) // matrix.GetLength(0) - выдает количество столбцов массива (1)
//     {
//         Console.Write($"{matrix[row, column]} ");
//     }
// Console.WriteLine();
// }

// void PrintArr(int[,] matr)
// {
//     for (int row = 0; row<matr.GetLength(0); row++)// matrix.GetLength(0) - выдает количество строк массива (0)
//     {
//         for (int column = 0; column <matr.GetLength(1); column++) // matrix.GetLength(0) - выдает количество столбцов массива (1)
//         {
//             Console.Write($"{matr[row, column]} ");
//         }
//     Console.WriteLine();
//     }
// }
// void FillArr(int[,] matr)
// {
//     for (int row = 0; row<matr.GetLength(0); row++)// matrix.GetLength(0) - выдает количество строк массива (0)
//     {
//         for (int column = 0; column <matr.GetLength(1); column++) // matrix.GetLength(0) - выдает количество столбцов массива (1)
//         {
//             matr[row,column] = new Random().Next(1,10);        
//         }
//     }
// }
// int [,] matrix = new int [3,4]; // числовые значения, вывод двухмерной таблицей
// PrintArr(matrix);
// FillArr(matrix);
// Console.WriteLine();
// PrintArr(matrix);
// Картинка + закрашивание с помощбю 2D массива.
// int[,] pic = new int[,] //не обязательно задавать количество строк и столбцов, если есть фикс данные.
// {
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, },
//     {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
// };
// void PrintImg(int[,] img)
// {
//     for (int i = 0; i < img.GetLength(0); i++)// matrix.GetLength(0) - выдает количество строк массива (0)
//     {
//         for (int j = 0; j < img.GetLength(1); j++) // matrix.GetLength(0) - выдает количество столбцов массива (1)
//         {
//             if (img[i, j] == 0)
//             {
//                 Console.Write($" ");
//             }
//             else
//             {
//                 Console.Write($"*");
//             }
//         }
//         Console.WriteLine();
//     }
// }
// void FillImg(int row, int col)
// {
//     if (pic[row, col] == 0)
//     {
//         pic[row, col] = 1;
//         FillImg(row-1, col); // рекурсия - функция, которая вызывает сама себя.
//         FillImg(row, col-1);
//         FillImg(row+1, col);
//         FillImg(row, col+1); // приавило левого поворота: сначалвверх, потом влево, вниз, вправо.
//     }

// }
// PrintImg(pic);
// FillImg(13,13);
// PrintImg(pic);

// Рекурсия
// на примере факториала:
// 5!=5*4*3*2*1
//    5*4!     
//      4*3!
//        3*2!
//          2*1!

// int Factorial(int n)// тип даннх int не может обрабатывать очень больштие числа, произойдет переполнение типа данных. Более емкий тип данных double
// {
//     if (n==1) return 1;
//     else return  n*Factorial(n-1);
// }
// double Factorial(int n)// тип даннх int не может обрабатывать очень больштие числа, на 16! произойдет переполнение типа данных. Более емкий тип данных double
// {
//     if (n==1) return 1;
//     else return  n*Factorial(n-1);
// }
// Console.WriteLine(Factorial(3));
// for (int i = 1; i<40; i++)
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}");
// }

// числа фибоначи
// f(1) = 1
// f(2) = 1
// f(3) = 2
// f(4) = 3
// f(5) = 5
// f(6) = 8
// ....
// f(n) = f(n-1) + f(n-2)

// double Fibonacci(int n) // примерно с 30 начнет считать очень медленно. можно напиать более быстрй способ
// {
//     if (n == 1 || n == 2) return 1;
//     else return Fibonacci(n - 1) + Fibonacci(n - 2);
// }
// for (int i = 1; i<50; i++)
// {
//     Console.WriteLine($"f({i}) = {Fibonacci(i)}");
// }


// обход дирректории (папки) - тоже методом рекурсии
